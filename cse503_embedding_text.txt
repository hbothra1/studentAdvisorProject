Course description
Software is becoming ever more complex and difficult to understand, at the same
time as it is used ever more pervasively.  It is hopeless to understand how
software systems work (or why they do not work!) without automated assistance.
Programmers need tool assistance during design, implementation, testing,
debugging, and modification (“maintenance”).
This graduate, research-focused course will investigate a variety of program
analysis techniques that address these software engineering tasks.  Topics
include static analysis (e.g., abstract interpretation), dynamic analysis (e.g.,
testing and debugging), program repair, mining software repositories,
and probabilistic methods.  While the course focuses on
the design and implementation of program analysis tools, the material will be
useful to anyone who wishes to improve their reasoning about programs or get an
overview of software engineering research.
Students will read classic and current technical papers and actively participate
in discussions and a research project.
This is not a course about how to build programs and get a job at
Amazon/Apple/Google/Meta/Microsoft, though the information in the
class may help you to do that. Rather, this is a course about research in
software engineering, and program analysis in particular.