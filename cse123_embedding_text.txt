Course Goals¶
Computing continues to play an ever-increasing role in today’s society. Having an understanding of computing is an essential skill for those in the 21stcentury; from working in industries more reliant on technology, using computational methods to further scientific understanding, or being an informed citizen in a world with technology all around us.
This course is a third course in computer programming focused on the design and implementation of data structures. It assumes students already have significant experience with programming and understand fundamental computing concepts (such as control structures (loops and conditionals), variables and data, and arrays) as well as basic data structure (lists, sets, stacks, queues, and maps/dictionaries) and the fundamentals of object-oriented programming. UnlikeCSE 122,CSE 123doesassume prior experience with the Java programming langauge. If you have not programmed in Java before, be sure to review ourJava Tutorial.
In this course, students will learn:
How to implement compound data structures such as lists and trees.
The use of recursion to efficiently solve computational problems.
How to utilize inheritance to represent relationships among similar classes.

Learning Objectives¶
CSE 123is designed around a set of 11 learning objectives. At the end of the course, successful students will be able to do the following:
Define a data structure to effectively and efficiently respresent compound and complex data
Define a solution to a given problem using a recursive approach
Trace and predict the behavior and results of Java code that uses inheritance, polymorphism, composition, and/or recursion
Describe the approximate runtime efficiency of a method or algorithm
Write functionally correct and maintainable Java code using inheritance, polymorphism, composition, and/or recursion that meets a provided specification and conforms to provided guidelines for style and implementation
Write functionally correct and maintainable Java classes to represent linked data structures that meets a provided specification and conforms to provided guidelines for style and implementation
Implement additional methods and classes within the constraints of existing systems
Clearly and effectively describe and document the behavior of a Java class and its methods at a level relevant to a client
Identify and enumerate a set of inputs or tests to determine the correctness of a class and its public APIs
Identify and fix errors in a class’s state or behavior
Describe ethical and sociotechnical issues related to software and technology and explain how their choices as programmers can impact those issues