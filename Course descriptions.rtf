{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red42\green44\blue46;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c21569\c22745\c23529;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18180\viewh15860\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
CSE121\
Introduction to computer programming for students without previous programming experience. Students write programs to express algorithmic thinking and solve computational problems motivated by modern societal and scientific needs. Includes procedural programming constructs (methods), control structures (loops, conditionals), and standard data types, including arrays.\
\
CSE122\
Computer programming for students with some previous programming experience. Emphasizes program design, style, and decomposition. Uses data structures (e.g., lists, dictionaries, sets) to solve computational problems motivated by modern societal and scientific needs. Introduces data abstraction and interface versus implementation.\
\
CSE123\
Computer programming for students with significant previous programming experience. Emphasizes implementation and run-time analysis of data structures and algorithms using techniques including linked references, recursion, and object-oriented inheritance to solve computational problems motivated by modern societal and scientific needs.\
\
CSE143\
Continuation of CSE142 Concepts of data abstraction and encapsulation including stacks, queues, linked lists, binary trees, recursion, instruction to complexity and use of predefined collection classes.\
\
CSE160\
Introduction to computer programming. Assignments solve real data manipulation tasks from science, engineering, business, and the humanities. Concepts of computational thinking, problem-solving, data analysis, Python programming, control and data abstraction, file processing, and data visualization. Intended for students without prior programming experience.\
\
CSE163\
Intermediate data programming. Topics include writing programs that manipulate different types of data; leveraging the growing ecosystem of tools and libraries for data programming; writing programs that are both efficient and elegant; and writing medium-scale programs (100 to 200 lines).\
\
CSE190B Freshman Direct-Admit Seminar\
 Seminar for Direct Admit 1st-year CSE majors.\
\
CSE311 Foundations of Computing I\
 Examines fundamentals of logic, set theory, induction, and algebraic structures with applications to computing; finite state machines; and limits of computability. Prerequisite: a minimum grade of 2.0 in either CSE 123 or CSE 143; and MATH 126 or MATH 136.\
\
CSE312 Foundations of Computing II\
 Examines fundamentals of enumeration and discrete probability; applications of randomness to computing; polynomial-time versus NP; and NP-completeness. Prerequisite: CSE 311.\
\
CSE331 Software Design and Implementation\
 Explores concepts and techniques for design and construction of reliable and maintainable software systems in modern high-level languages: specifications; program structure and design; program-correctness approaches, including testing; and event-driven programming (e.g., graphical user interface). Prerequisite: a minimum grade of 2.0 in either CSE 123 or CSE 143.\
\
CSE332 Data Structures and Parallelism\
 Covers abstract data types and structures including dictionaries, balanced trees, hash tables, priority queues, and graphs; sorting; asymptotic analysis; fundamental graph algorithms including graph search, shortest path, and minimum spanning trees; multithreading and parallel algorithms; P and NP complexity classes. No credit if CSE 373 has been taken. Prerequisite: CSE 311.\
\
CSE333 Systems Programming\
 Includes substantial programming experience in languages that expose machine characteristics and low-level data representation (e.g., C and C++); explicit memory management; modern libraries and language features; interacting with operating-system services; introduction to concurrent programming. Prerequisite: CSE 351.\
\
CSE340 Interaction Programming\
 User interfaces for computing systems, including principles and implementation techniques. Covers key topics and programming paradigms for interactive systems, such as event handling; graphical layout, design, and widgets; undo; accessibility; and context awareness. Provides experience with modern application domains and frameworks (e.g., mobile applications). Prerequisite: CSE 123 or CSE 143.\
\
CSE341 Programming Languages\
 Basic concepts of programming languages, including abstraction mechanisms, static and dynamic typing, scope, syntax vs. semantics, first-class function closures, and algebraic datatypes. Detailed study of functional programming and other paradigms. Cannot be taken for credit if credit received for CSE 413. Prerequisite: CSE 123 or CSE 143.\
\
CSE344 Introduction to Data Management\
 Introduces database management systems and writing applications that use such systems; data models (e.g., relational, semi-structured), query languages (e.g., SQL, XQuery), language bindings, conceptual modeling, transactions, security, database tuning, data warehousing, parallelism, and web-data management.\
\
CSE351 The Hardware/Software Interface\
 Examines key computational abstraction levels below modern high-level languages; number representation, assembly language, introduction to C, memory management, the operating-system process model, high-level machine architecture including the memory hierarchy, and how high-level languages are implemented.\
\
CSE369 Introduction to Digital Design\
 Introduces the implementation, specification, and simulation of digital logic. Boolean algebra; combinational circuits including arithmetic circuits and regular structures; sequential circuits including finite-state-machines; and use of field-programmable gate arrays (FPGAs). Emphasizes simulation, high-level specification, and automatic synthesis techniques. Cannot be taken for credit if credit received for E E 271.\
\
CSE371 Design of Digital Circuits and Systems\
 Provides a theoretical background in, and practical experience with, tools, and techniques for modeling complex digital systems with the Verilog hardware description language, maintaining signal integrity, managing power consumption, and ensuring robust intra- and inter-system communication. Prerequisite: either E E 205 or E E 215; either E E 271 or CSE 369. Offered: jointly with E E 371.\
\
CSE373\
Fundamental algorithms and data structures for implementation. Techniques for solving problems by programming. Linked lists, stacks, queues, directed graphs. Trees: representations, traversals. Searching (hashing, binary search trees, multiway trees). Garbage collection, memory management. Internal and external sorting. Intended for non-majors.\
\
CSE412\
Introduction to data visualization design and use for both data exploration and explanation. Methods for creating effective visualizations using principles from graphic design, psychology, and statistics. Topics include data models, visual encoding methods, data preparation, exploratory analysis, uncertainty, cartography, interaction techniques, visual perception, and evaluation methods.\
\
CSE414\
Introduces database management systems and writing applications that use such systems; data models, query languages, transactions, database tuning, data warehousing, and parallelism. Intended for non-majors. Cannot be taken if credit received for CSE344\
\
CSE415\
Principles and programming techniques of artificial intelligence: LISP, symbol manipulation, knowledge representation, logical and probabilistic reasoning, learning, language understanding, vision, expert systems, and social issues. Intended for non-majors.\
\
CSE416\
Provides practical introduction to machine learning. Modules include regression, classification, clustering, retrieval, recommender systems, and deep learning, with a focus on an intuitive understanding grounded in real-world applications. Intelligent applications are designed and used to make predictions on large, complex datasets.\
\
CSE390Z Mathematics for Computation Workshop\
 Designed to provide academic support to students enrolled concurrently CSE 311. 311 concepts are at the core of computer science, but they are different from what many students have experienced in CS courses before. CSE 390Z is not a part of CSE 311 and is a separate course. All students enrolled in CSE 311 are welcome to register.\
\
CSE391 System and Software Tools\
 Introduction to tools commonly used in software development. Topics include using a command-line interface, writing scripts for file and string manipulation, managing user permissions, manipulating text with regular expressions, using build-management tools, and using version-control systems. Prerequisite: either CSE 122, CSE 123, or CSE 143. Credit/no-credit only.\
\
CSE401 Introduction to Compiler Construction\
 Fundamentals of compilers and interpreters; symbol tables; lexical analysis, syntax analysis, semantic analysis, code generation, and optimizations for general purpose programming languages. No credit to students who have taken CSE 413. Prerequisite: CSE 332; CSE 351.\
\
CSE402 Design and Implementation of Domain-Specific Languages\
 Design and implementation of domain-specific languages. Creation of new programming abstractions, formal and informal language specification techniques, implementation strategies to support language analysis and execution on traditional and non-traditional computing platforms. Selection and use of appropriate software tools and development environments to build novel DSLs.\
\
CSE403 Software Engineering\
 Fundamentals of software engineering using a group project as the basic vehicle. Topics covered include the software crisis, managing complexity, requirements specification, architectural and detailed design, testing and analysis, software process, and tools and environments. Prerequisite: CSE 331; CSE 332.\
\
CSE421 Introduction to Algorithms\
 Techniques for design of efficient algorithms. Methods for showing lower bounds on computational complexity. Particular algorithms for sorting, searching, set manipulation, arithmetic, graph problems, pattern matching. Prerequisite: CSE 312; CSE 332.\
\
CSE422 Advanced Toolkit for Modern Algorithms\
 A rigorous introduction to the principles of modern algorithm design, with a particular focus on the analysis of large, noisy data sets, and the algorithmic principles underlying modern statistics and machine learning. Students reason about and implement contemporary algorithms, and analyze their behavior on real-world data sets. Prerequisite: CSE 312; CSE 332; and MATH 208.\
\
CSE426 Cryptography\
Rigorous introduction to modern cryptography. Design and application of important cryptographic objects, such as encryption, message authentication, and zero-knowledge proofs. Students learn to formalize security goals, design schemes for achieving these goals, and study security attacks or security proofs that establish the security or insecurity of schemes. Prerequisite: CSE 312.\
\
CSE427 Computational Biology\
 Algorithmic and analytic techniques underlying analysis of large-scale biological data sets such as DNA, RNA, and protein sequences or structures, expression and proteomic profiling. Hands-on experience with databases, analysis tools, and genome markers. Applications such as sequence alignment, BLAST, phylogenetics, and Markov models. Prerequisite: CSE 312; CSE 332.\
\
CSE428 Computational Biology Capstone\
 Designs and implements a software tool or software analysis for an important problem in computational molecular biology. Prerequisite: CSE 312; CSE 331; CSE 332.\
\
CSE431 Introduction to Theory of Computation\
 Models of computation, computable and noncomputable functions, space and time complexity, tractable and intractable functions. Prerequisite: CSE 312.\
\
CSE434 Introduction to Quantum Computation\
 Basic theory of quantum information and computation, including applications and phenomena. Builds from qubits, measurements, and quantum gates toward applications including key distribution, entanglement, non-locality, and quantum algorithms including Grover search and Shor\'92s factoring. Includes writing quantum programs. Prerequisite: MATH 208 and CSE 312.\
\
CSE440 Introduction to HCI: User Interface Design, Prototyping, and Evaluation\
 Human-Computer Interaction (HCI) theory and techniques. Methods for designing, prototyping, and evaluating user interfaces to computing applications. Human capabilities, interface technology, interface design methods, and interface evaluation tools and techniques. Prerequisite: CSE 332.\
\
CSE441 Advanced HCI: Advanced User Interface Design, Prototyping, and Evaluation\
 Human-Computer Interaction (HCI) theory and techniques. Advanced methods for designing, prototyping, and evaluating user interfaces to computing applications. Novel interface technology, advanced interface design methods, and prototyping tools. Prerequisite: CSE 440.\
\
CSE442 Data Visualization\
 Techniques for creating effective visualizations of data based on principles from graphic design, perceptual psychology, and statistics. Topics include visual encoding models, exploratory data analysis, visualization software, interaction techniques, graphical perception, color, animation, high-dimensional data, cartography, network visualization, and text visualization. Prerequisite: CSE 332.\
\
CSE444 Database Systems Internals\
 The relational data model and the SQL query language. Conceptual modeling: entity/relationships, normal forms. XML, XPath, and XQuery. Transactions: recovery and concurrency control. Implementation of a database system. A medium sized project using a rational database backend. Prerequisite: CSE 332; and either CSE 344 or CSE 414.\
\
CSE446 Machine Learning\
 Design of efficient algorithms that learn from data. Representative topics include supervised learning, unsupervised learning, regression and classification, deep learning, kernel methods, and optimization. Emphasis on algorithmic principles and how to use these tools in practice. Prerequisite: CSE 332; MATH 208 or MATH 136; and either STAT 390, STAT 391, or CSE 312.\
\
CSE447 Natural Language Processing\
 Methods for designing systems that usefully and/or intelligently process natural language text data. Language models, text categorization, syntactic and semantic analysis, machine translation. This course emphasizes algorithms and data-driven methods. Prerequisite: CSE 312 and CSE 332; recommended: MATH 208; and CSE 446 is recommended before or concurrently.\
\
CSE451 Introduction to Operating Systems\
 Principles of operating systems. Process management, memory management, auxiliary storage management, resource allocation. No credit to students who have completed CSE 410. Prerequisite: CSE 351; CSE 332; CSE 333.\
\
CSE452 Distributed Systems\
 Covers abstractions and implementation techniques in the construction of distributed systems, including cloud computing, distributed storage systems, and distributed caches. Prerequisite: CSE 332 and CSE 333; recommended: CSE 451\
\
CSE453 Data Center Systems\
 Datacenter server, network, storage, security, and energy management technologies. Virtualization, I/O architectures, resource isolation and provisioning, disaggregation, quality of service, and tail latency. Prerequisite: CSE 332 and CSE 333; recommended: CSE 451 or CSE 452.\
\
CSE455 Computer Vision\
 Introduction to image analysis and interpreting the 3D world from image data. Topics may include segmentation, motion estimation, image mosaics, 3D-shape reconstruction, object recognition, and image retrieval. Prerequisite: CSE 333; CSE 332.\
\
CSE456 Story Design for Computer Animation\
 Animation principles and production for story development and design. Design, development, and production of several storyreels, which are a tool for the pre-production of animated features and shorts. Student use authoring tools to present finished work.\
\
CSE457 Computer Graphics\
 Introduction to computer image synthesis, modeling, and animation. Topics may include visual perception, displays and framebuffers, image processing, affine and projective transformations, hierarchical modeling, hidden surface elimination, shading, ray-tracing, anti-aliasing, texture mapping, curves, surfaces, particle systems, dynamics, character animation, and animation principles. Prerequisite: CSE 333; CSE 332.\
\
CSE458 Computer Animation\
 Introduction to basic principles of computer generated animation. Focus on the modeling and lighting of animated characters. Students from Art, CSE, and Music team up on projects to be built on commercially-available modeling and lighting packages.\
\
CSE459 Animation Pre-Production\
 Pre-production of collaboratively designed animated shorts. In-depth analysis of classical and computer generated works. Character design and pre-planning, model sheets, character rigging, storyreel and animatics, character motion, design for multiple characters, and principles of animation as applied to character motion and effects.\
\
CSE460 Animation Capstone\
 Apply the knowledge gained in previous animation courses to produce a short animated film. Topics include scene planning, digital cinematography, creature and hard surface modeling, animatics and basics of character animation, and rendering techniques.\
\
CSE461 Introduction to Computer Communication Networks\
 Computer network architectures, protocol layers, network programming. Transmission media, encoding systems, switching, multiple access arbitration. Network routing, congestion control, flow control. Transport protocols, real-time, multicast, network security. Prerequisite: either CSE 326 or CSE 332; either CSE 303 or CSE 333.\
\
CSE464 Advanced Topics in Digital Animation\
 Students design individual animated works for professional quality demo reels. 2- and 3-D animatics, special effects design, advanced character animation techniques, 3-D paint techniques and integration, short design, sequence planning, non-photorealistic rendering options, interactive animation for pre-planning, and advanced production techniques and strategies.\
\
CSE469 Computer Architecture I\
 Introduction to computer architecture. Assembly and machine language, microprocessor organization including control and datapath. Computer arithmetic. Memory systems and caching. Performance modeling of microprocessors. Prerequisite: either E E 271 or CSE 369; and either CSE 123 or CSE 143. Offered: jointly with E E 469.\
\
CSE470 Computer Architecture II\
 Advanced computer architecture. Performance evaluation and energy efficiency. Instruction set architectures. Instruction-level parallelism. Modern microprocessor micro-architecture. Thread-level parallelism. Cache coherency and memory consistency in shared-memory multiprocessors. Memory hierarchy. GPU architecture. Warehouse-scale computing. Trends in computer design. Prerequisite: either CSE 469 or E E 469. Offered: jointly with E E 470.\
\
CSE473 Introduction to Artificial Intelligence\
 Principal ideas and developments in artificial intelligence: Problem solving and search, game playing, knowledge representation and reasoning, uncertainty, machine learning, natural language processing. Not open for credit to students who have completed CSE 415. Prerequisite: CSE 312, CSE 332\
\
CSE474 Introduction to Embedded Systems\
 Introduces the specification, design, development, and test of real time embedded system software. Use of a modern embedded microcomputer or microcontroller as a target environment for a series of laboratory projects and a comprehensive final project. Prerequisite: CSE 143. Offered: jointly with E E 474;\
\
CSE475 Embedded Systems Capstone\
 Capstone design experience. Prototype a substantial project mixing hardware, software, and communications. Focuses on embedded processors, programmable logic devices, and emerging platforms for the development of digital systems. Provides a comprehensive experience in specification, design, and management of contemporary embedded systems. Prerequisite: either E E 271 or CSE 369; either CSE 466, E E 472, or CSE 474/E E 474. Offered: jointly with E E 475;\
\
CSE478 Autonomous Robotics\
 Theory and application of algorithms and probabilistic techniques for autonomous robotics. Covers topics related to state estimation (Bayes filtering, probabilistic motion and sensor models), planning/control (search based planners, lattice based planners, trajectory following techniques), and perception and learning (object detection, learning from demonstrations etc.).\
\
CSE480 Computer Ethics Seminar\
 Reading and discussion seminar on the ethical issues surrounding sociotechnical systems and their impacts on society. Includes historical perspectives and current topics. Relates computer technology to ethical questions of power, politics, equity, privacy, autonomy, and more. Credit/no-credit only.\
\
CSE 481C: ROBOTICS CAPSTONE\
COURSE OBJECTIVES\
The main goal of this course is to open up new career options in robotics for computer science and engineering students. To that end, the course will teach you the basics of robotics and give you implementation experience. You will learn to use libraries and tools within the most popular robot programming framework ROS (Robot Operating System). We will touch on robot motion, navigation, perception, planning, and interaction through mini-lectures, labs, and assignments, eventually integrating these components to create autonomous or semi-autonomous robotic functionalities. The project will give you team-work experience with large scale software integration and it will get you thinking about opportunities for using robots to address societal challenges. At the end of the quarter students are expected to be able to: \
\
Identify real world problems where robots are the right solution\
\
Use important tools in ROS, contribute to ROS, find available packages in ROS\
\
Describe the basics of robot perception, navigation, manipulation, and planning; appropriately use related ROS libraries to solve real problems\
\
Develop and integrate complex robot software\
\
Safely operate robot hardware\
\
Articulate the importance of interface design and robustness of functionalities in robotics.\
\
Find out more about general capstone objectives here. \
\
PROJECT THEME: ASSISTIVE ROBOT CAREGIVERS\
Robots that can assist people in everyday tasks and challenges can bring independence to people with disabilities, enable aging in place, and more generally improve the quality of our lives. In this capstone you will develop an assistive robot that helps address challenges faced by a disadvantaged user group, such as:\
\
older adults or persons with age-related disabilities,\
\
persons with sensory or motor impairments (e.g. hearing, vision, mobility, use of limbs),  \
\
persons with chronic health conditions (e.g. asthma, diabetes).\
\
Depending on the nature of the challenge being addressed, the assistance provided by the robot can fall into different categories:\
\
Physical/sensory assistance: the robot can navigate the environment, and physically manipulate and transport objects. The robot can also gather information from the environment leveraging its mobility. For example, Henry Evans (quadriplegic as a result of a stroke) worked with a team from Georgia Tech to program a PR2 robot to perform tasks like shaving and a team from Brown University to use a drone for surveillance of his grape vines. \
\
Social/cognitive/emotional assistance: the robot can act as a social agent to facilitate and support cognitive/emotional tasks. For example a team from the University of Southern California used a social robot to support stroke survivors in doing rehabilitation exercises.\
\
Your projects will primarily focus on physical assistance taking advantage of robots as a unique solution, but it can include social assistance features. Our robot platform for the class is the Stretch 2 mobile manipulator. In addition to programming and possibly physically augmenting the robot platform, your projects will likely involve structuring the robot's environment to enable functionalities that might not be possible in environments that are designed for humans. \
\
Besides solving technical problems for your project, you will work on identifying needs or pain points of your chosen user group, evaluating usability of your solution, and ensuring its potential viability.\
\
CSE481DS: Data Science Capstone\
Content\
What is this course about?\
Data analysis is a central activity for scientific research and is increasingly a critical part of decision making in government and business. However, producing reliable data analysis outcomes is challenging since the decisions made throughout the analysis process can dramatically affect the eventual outcome. This Data Science Capstone focuses on the complete end-to-end process of data analysis performed with code: the iterative, and often exploratory, steps that analysts go through to turn data into results. Our focus is not limited to statistical modeling or machine learning, but rather the complete process, including transformation, exploration, modeling, and evaluation choices.\
\
Students will work in groups of four on a single project that will tie together and apply previous experiences from CSE 312, 332, 446, 442, 344, and other classes. Students are expected to already possess knowledge of appropriate machine learning, visualization and database methods, and will focus on independently applying those methods in the context of your project. There will therefore be limited lecture material in this course. Course staff will instead work closely with students to critique and advise on their group project. Students will experience the end-to-end data analysis process from transformation and exploration of data to modeling and evaluation. Your group will brainstorm on a project during the first week, before collaboratively exploring the data and implementing a complete data analysis workflow. This capstone course gives hands-on experience with selecting a data science question, and with crafting and evaluating a data science process to answer that question.\
\
Prerequisites\
Students should have completed CSE 332 and CSE 312, and at least one of CSE 446, CSE 442, or CSE 344. There are no other requirements for participating in this capstone class.\
\
\
\
CSE 481N:Capstone: Natural Language Processing \
\
Goals of the Course\
This class will provide students with an intensive 10-week experience in successfully completing a challenging, well-scoped research project on a topic related to natural language processing and its many applications.\
\
Participants will work in small groups (approximately 3 people in each group) to hone their technical skills to quickly absorb and adapt new technical knowledge, gain experience in complex programming, perform thorough experiments and analysis, and learn how to find a path when faced with negative results.\
\
Additional objectives of this class include:\
\
technical communication skills to produce high quality interim technical reports that inspire insightful discussion across project groups,\
advisory project experience to provide technical advice and constructive feedback to others, and project management skills to prioritize work items to maximize the chance for successful outcome.\
Though not required, some project options in this class have a benefit to the larger community of NLP researchers and practitioners, through the generation of reproducibility reports and open-source artifacts.\
Project Options\
There are two options for projects:\
\
Reproducibility project (\'93option R\'94): reproduce experiments in a recently published NLP paper. Detailed instructions for this option are given here.\
Design your own (\'93option D\'94). Your team designs a project around something you are interested in. The course staff will do our best to advise you directly or to connect you to local researchers with relevant expertise.\
The course calendar details the deadlines for the project\'92s written reports.\
\
In addition to the written reports, your team is expected to give four five-minute updates over the course of the quarter. Refer to the course calendar for the dates of your team\'92s updates. You are required to use no more than three slides (including the title slide) for each update. Finally, there will be a final presentation either as a video (which you will upload to Youtube) or as a live poster session at the end of the quarter.\
\
\
CSE481NE Capstone: Neural Engineering\
Design, build and present a prototype device or software tool that solves an important problem in neural engineering. Examples include interfaces based on combining AI with brain-, muscle-, and/or eye-tracking signals to control computers or robotic devices, virtual reality approaches to improving neural function, and machine learning-based software tools for analyzing large-scale neural data.\
\
\
CSE481P Capstone: Social Computing\
Students will work in teams of 3 to 4 to design and evaluate computational formulations of global problems such as achieving stability and sufficiency of the world food supply, managing the threats of nuclear war, ending homelessness, and minimizing the undesirable consequences of climate change. Each team will begin by selecting a problem in consultation with the teaching team, identifying and analyzing appropriate information resources, including possible consultations with outside experts. The team will propose one or more basic formulations, present them, and receive critiques from both the teaching team and the other teams. They will iteratively refine their formulations, moving towards working code that supports users in roles that engage them in understanding and solving the problem.\
\
\
CSE481S Capstone: Security\
Student teams will be tasked with creating a computer security themed product. The work will progress from product conception to requirements to design to implementation to evaluation. Along the way, students will incorporate key computer security tools and practices, including threat modeling, penetration testing, and bug fixing. Examples include password managers, censorship resistance systems, and mobile payment systems\
\
CSE482\
Students work in teams to design and implement a software project involving multiple areas of the CSE curriculum, for the purpose of empowering marginalized or underserved populations.\
\
\
CSE481V Capstone: AR/VR\
Virtual and Augmented Reality Capstone. Students become familiar with the latest technology and software, and build an app in 10 weeks.\
\
CSE484: Computer Security\
Catalog Description: Foundations of modern computer security, including software security, operating system security, network security, applied cryptography, human factors, authentication, anonymity, and web security. Prerequisite: CSE 332; CSE 351.\
\
CSE490\
Lectures, discussions, and possibly labs on topics of current interest in computer science and engineering not covered by other CSE undergraduate courses.\
\
CSE492 Undergraduate Seminar\
Seminars on current topics in computer science and engineering. Topic selection will vary from quarter to quarter. Credit/no-credit only.\
\
CSE492C Seminar: Navigating Early-Career Challenges\
Seminars on current topics in computer science and engineering. Topic selection will vary from quarter to quarter.\
CSE492J Career Seminar\
 Career Seminar\
\
CSE492L CSE Leadership Seminar Series\
 Seminar series, primarily targeted at undergraduates, that brings CSE alumni and friends to campus to describe how to be effective in a startup, small company, large company, or less common environment.\
\
CSE492P1 Seminar: Patterns for Career Success\
 Patterns for Career Success\
\
CSE493C Advanced Special Topics: Molecular Computation\
 Introduction to molecular computation that explores how \'93smart\'94 molecules can be designed and programmed, using ideas that span computer science, to not only store and process information, but to self-assemble into complex structures with nanometer precision, to sense (bio-)chemical signals from their environment, perform robust computation, and in turn actuate a physical response.\
This course is self-contained and assumes no prior knowledge of biology, chemistry, nor prior experience in a wet lab. All majors interested in learning about and building programmable matter at the nanoscale are welcome.\
\
\
CSE493E Advanced Special Topics: Accessibility\
To learn how computing can enable new solutions to accessibility, including both access to the world and access to computers? Similarly, how can a disability studies perspective guide us in developing empowering and relevant solutions to accessibility problems? This course explores both of those questions through a combination of discussions, reading, and building. In addition, by studying access technology, we can gain valuable insights into the future of all user interface technology. \
\
CSE493F Advanced Special Topics: Physical Computing\
 \
\
CSE493G1 Advanced Special Topics: Introduction to Deep Learning\
Deep Learning has become ubiquitous in our society, with applications in search, image understanding, apps, mapping, medicine, drones, and self-driving cars. Core to many of these applications are visual recognition tasks such as image classification, localization and detection and language understanding tasks like summarization, text generation and reasoning. Recent developments in neural network (aka \'93deep learning\'94) approaches have greatly advanced the performance of these state-of-the-art systems.\
\
\
This course is a deep dive into the details of deep learning algorithms, architectures, tasks, metrics, with a focus on learning end-to-end models. We will begin by grounding deep learning advancements particularly for the task of image classification; later, we will generalize these ideas to many other tasks. During the 10-week course, students will learn to implement and train their own neural networks and gain a detailed understanding of cutting-edge research in deep learning. Additionally, the final assignment will give them the opportunity to train and apply multi-million parameter networks on real-world vision problems of their choice. Through multiple hands-on assignments and the final course project, students will acquire the toolset for setting up deep learning tasks and practical engineering tricks for training and fine-tuning deep neural networks.\
\
CSE493H Advanced Special Topics: Computational Design and Fabrication\
This course introduces students to the new and exciting field of computational design and fabrication, which is currently laying the foundations on which the next generation of manufacturing workflows and systems will be built. We will cover the essential computational tools of every stage in the computational fabrication pipeline: from hardware and its abstraction to the high level specification methods of design and their interactions with designers and engineers. Topics include concepts of hardware abstraction languages, geometry processing fundamentals, physics-based simulation, optimization techniques, data-driven design methods, and algorithms for high-performance interactive applications. \
\
CSE493Q Advanced Special Topics: Quantum Computing\
The goal of the course is to rigorously understand the basics of the theory of quantum computation, and to explore as many fascinating applications and phenomena in quantum information as possible. \
\
\
Prerequisites: students should have taken at least one linear algebra and one probability class (the more familiarity the better, but we will review what is strictly necessary at the start), and preferably also one discrete math class. \
\
CSE493S Advanced Maching Learning\
 \
\
CSE493V Advanced Special Topics: Virtual Reality Systems\
Modern virtual reality systems draw on the latest advances in optical fabrication, embedded computing, motion tracking, and real-time rendering. In this hands-on course, students will foster similar cross-disciplinary knowledge to build a head-mounted display. This project spans hardware (optics, displays, electronics, and microcontrollers) and software (JavaScript, WebGL, and GLSL). Each assignment builds toward this larger goal. For example, in one assignment, students will learn to use an inertial measurement unit (IMU) to track the orientation of the headset. In another assignment, students will apply real-time computer graphics to correct lens distortions. Lectures will complement these engineering projects, diving into the history of AR/VR and relevant topics in computer graphics, signal processing, and human perception. Guest speakers will participate from leading AR/VR companies.\
\
For a summary of the 2020 edition of CSE 493V, including interviews with the students, please read "New Virtual Reality Systems course turns students into makers", as published by the Allen School News. \
\
CSE493W Advanced Special Topics: Wireless Communication\
 \
\
CSE493X Advanced Special Topics: Web Browser Engineering\
The course is based on the online textbook Web Browser Engineering. We will cover one chapter per week of the book, for 10 weeks. The calendar page is the best place to get up-to-date information about the schedule.\
\
Each week, students will implement 1 core feature in their browser, plus several extensions. The core feature is covered in detail by the corresponding book chapter. The implementation of this feature usually involves some refactoring of existing code, as well as understanding the content of the book and putting together the starter code into a working implementation. The remaining extensions are exercises that extend the core feature of the week with additional functionality. These exercises will be selected from the list of exercises at the end of each book chapter.\
\
"Week N" of the course proceeds as follows.\
\
On the previous Friday, Gilbert covers background material.\
Students should read the book chapter before class on Monday.\
In lecture on Monday, Gilbert will highlight some aspects of the book's presentation and live code the week's core feature\
Due Tuesday night: Students submit the core feature.\
In lecture on Wednesday, students take turns typing as the group works on the exercises.\
In section on Thursday, we continue working on the exercises as a group.\
(In lecture on Friday, we begin the background for the following week.)\
Due Friday night: Students submit the exercises.\
Week 1 and Week 10 are a little different. See the schedule.\
\
There are no quizzes or exams.\
\
Lectures may be recorded and made available to all students. They may also not be recorded. Lecture notes will definitely be available for those who cannot attend a given lecture.\
\
CSE495\
Available in special situations for computer science majors to complete, under instructor guidance, a substantial computing project that deepens one's knowledge and experience in the field. Projects may involve a group of students.\
\
CSE 496 Honors Undergraduate Research (1-9)\
Undergraduate research or design project carried out under the supervision of a faculty sponsor.\
\
CSE498\
Undergraduate research carried out under the supervision of a faculty sponsor.\
\
CSE499\
Available in special situations for advanced computer science majors to do reading and research in field, subject to approval of undergraduate adviser and CSE faculty member. Free elective, but does not replace core course or computer science elective.\
\
CSE503\
Specification, implementation, and testing of large, multiperson, software systems. Topics include abstraction, information hiding, software development environments, and formal specifications.\
\
CSE510\
Content varies, including interface issues for networks, embedded systems, education applications, safety and critical systems, graphics and virtual reality, databases, and computer-supported cooperative work.\
\
B.S./M.S. Courses for 5th Year Master\'92s students.\
\
CSEM501 Introduction to Compiler Construction\
Fundamentals of compilers and interpreters; symbol tables; lexical analysis, syntax analysis, semantic analysis, code generation, and optimizations for general purpose programming languages. Cannot be taken for credit if credit received for CSE 401. Prerequisite: CSE 332; CSE 351.\
\
CSEM544 Database Systems\
Relational data model and SQL query language. Conceptual modeling; normal forms; XML. Transactions: recovery and concurrency control. Implementation of a database system. Application project using a relational database system. Study of database research papers. May not be taken for credit if student has taken CSE 444. Prerequisite: CSE 332; CSE 344.\
\
CSEM547 Natural Language Processing\
Methods for designing systems that usefully and/or intelligently process natural language text data. Language models, text categorization, syntactic and semantic analysis, machine translation. Emphasizes algorithms and data-driven methods. Prerequisite: CSE 312 and CSE 332. Cannot be taken for credit if credit received for CSE 447; recommended: MATH 308; CSE 446 is recommended before or concurrently.\
\
CSEM552 Introduction to Distributed Systems\
Covers abstractions and implementation techniques in the construction of distributed systems, including cloud computing, distributed storage systems, and distributed caches. Prerequisite: CSE 332 and CSE 333; recommended: CSE 451.\
\
CSEM553 Datacenter Systems\
Datacenter server, network, storage, security, and energy management technologies. Virtualization, I/O architectures, resource isolation and provisioning, disaggregation, quality of service, and tail latency. Prerequisite: CSE 332 and CSE 333; recommended: CSE 451 or CSE 452.\
\
CSEM584 Computer Security\
Explores foundations and new directions in computer security and privacy, including: risk analysis, system security, applied cryptography, human-computer interaction, design and implementation issues, anonymity, web security, and side channels. Studies security and privacy research papers. Prerequisite: CSE 332 and CSE 351; recommended: CSE 451 or CSE 461.\
\
\
\pard\tx8071\pardeftab720\partightenfactor0
\cf2  }