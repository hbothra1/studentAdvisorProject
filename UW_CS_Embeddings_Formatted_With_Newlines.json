{
  "CSE444": [
    "Course Description: CSE 444 is a deep dive into how database management systems (DBMSs) work internally. Students explore the underlying architecture of relational DBMSs, covering query execution, indexing, storage, and transaction management. The course emphasizes building fundamental components of a DBMS from scratch and understanding performance tradeoffs in different data storage and access patterns.",
    "Learning Goals:\n\n- Understand core components of a database system: storage, indexing, query execution, and transactions.\n- Analyze tradeoffs in query execution strategies and storage layout.\n- Develop low-level database internals like a query planner, buffer manager, and recovery mechanisms.\n- Build real-world DBMS modules from scratch using C++.",
    "Topics:\n\n- Record and page layout\n- Buffer management\n- B+ Trees\n- Hash indexes\n- Join algorithms\n- Query planning and optimization\n- Concurrency control\n- Crash recovery and logging",
    "Tools:\n\n- C++ for implementing a mini database engine\n- Git/GitHub for project collaboration\n- Makefiles, Valgrind, and GDB for debugging and testing"
  ],
  "CSE442": [
    "Course Description: CSE 442 explores the theory and practice of data visualization. It emphasizes the creation of effective visual representations that help people explore, understand, and communicate data. The course integrates concepts from graphic design, human perception, and cognitive science with computational techniques. Students apply these principles to build interactive web-based visualizations using modern libraries and frameworks.",
    "Learning Goals:\n\n- Understand key visualization principles including data encoding, perception, and interaction.\n- Learn how to match visualization types to data and tasks (e.g., spatial, temporal, networked).\n- Gain fluency with frameworks such as D3.js and Vega-Lite for building visualizations.\n- Develop the ability to critique and improve existing visual designs.\n- Build full-featured visualization projects and communicate results effectively.",
    "Topics:\n\n- Graphical perception & cognitive science foundations\n- Marks and visual encoding channels\n- Scales, axes, legends\n- Interaction techniques (brushing, zooming, filtering)\n- Geospatial & cartographic visualization\n- Multi-view composition\n- Deceptive visualization and visual ethics\n- Storytelling with data",
    "Tools:\n\n- Vega-Lite\n- D3.js\n- Observable Notebooks\n- Tableau (introductory tutorial)\n- Arquero (data transformation)\n- HTML/CSS/JavaScript"
  ],
  "CSE440": [
    "Course Description: CSE 440 introduces students to the process of designing interactive systems through the lens of human-computer interaction (HCI). Rather than focusing on implementation, the course emphasizes a structured design process \u2014 from identifying user needs to producing and refining prototypes. Through hands-on projects and critique sessions, students develop skills to ideate, research, prototype, and evaluate interactive digital experiences.",
    "Learning Goals:\n\n- Apply design research techniques including user interviews and contextual inquiry.\n- Develop storyboards, personas, and usage scenarios for prototyping.\n- Use low-fidelity and high-fidelity prototypes to explore and refine design ideas.\n- Critique peer designs and reflect critically on one\u2019s own process.\n- Communicate interaction design decisions through posters, reports, and web summaries.",
    "Topics:\n\n- Problem framing and design opportunity identification\n- Design research and needfinding\n- Sketching, storyboarding, and task analysis\n- Prototyping techniques (paper and digital)\n- Heuristic evaluation and usability testing\n- Design critique and reflection\n- Final design communication (poster, digital mockup, web post)",
    "Tools:\n\n- Figma (for high-fidelity design)\n- Miro or pen/paper (for low-fidelity prototypes)\n- Heuristic evaluation frameworks\n- Presentation tools (e.g., Google Slides, InDesign)"
  ],
  "CSE431": [
    "Course Description: CSE 431 explores fundamental questions in theoretical computer science, including what can be computed and how efficiently. Students study abstract computational models (like Turing machines) to understand the nature and limits of algorithmic problem-solving.",
    "Learning Goals:\n\n- Understand and design abstract computational models such as finite automata, pushdown automata, and Turing machines.\n- Prove the decidability and undecidability of formal language problems using reduction techniques.\n- Grasp the foundational results of computational complexity theory, including P vs NP and space complexity.\n- Analyze the hardness of problems and interpret complexity class relationships like NP-completeness and PSPACE.",
    "Topics:\n\n- Turing machines\n- Church-Turing Thesis\n- Undecidability\n- Mapping reductions\n- Context-free grammars\n- NP-completeness\n- PSPACE\n- Savitch-s Theorem",
    "Tools:\n\n- Gradescope\n- Panopto\n- Canvas\n- LaTeX"
  ],
  "CSE428": [
    "Course Description: CSE 428 is a capstone focused on applying large language models (LLMs) to biomedical challenges. Students independently design, implement, and evaluate research-level projects.",
    "Learning Goals:\n\n- Identify biomedical problems that can be addressed with LLMs.\n- Design and implement projects involving prompt engineering and model evaluation.\n- Critique biomedical NLP research.\n- Present results through reports and presentations.",
    "Topics:\n\n- Zero-shot classification\n- Prompt engineering\n- Evaluation benchmarks\n- Biomedical NLP\n- Protein prediction\n- Research showcase presentations",
    "Tools:\n\n- ChatGPT\n- BioGPT\n- Python\n- Jupyter\n- PubMed datasets"
  ],
  "CSE427": [
    "Course Description: CSE 427 provides an introduction to computational biology without requiring programming. It focuses on biological questions and computational strategies.",
    "Learning Goals:\n\n- Analyze algorithms used in bioinformatics.\n- Interpret graphs and biological models.\n- Critique scientific literature in computational biology.",
    "Topics:\n\n- Sequence alignment\n- Protein function prediction\n- Biomedical graph analysis\n- Genomics\n- Generative AI for biology\n- Weekly research talks",
    "Tools:\n\n- Bioinformatics papers\n- Datasets\n- Gradescope"
  ],
  "CSE426": [
    "Course Description: CSE 426 introduces core principles of modern cryptography, including block ciphers, secure communication, and zero-knowledge proofs.",
    "Learning Goals:\n\n- Design secure cryptographic schemes.\n- Use reduction-based proofs to argue about security.\n- Explore advanced topics like secure computation and zero-knowledge.",
    "Topics:\n\n- Symmetric encryption\n- Semantic security\n- MACs\n- Hash functions\n- Digital signatures\n- Zero-knowledge proofs\n- Homomorphic encryption",
    "Tools:\n\n- Gradescope\n- Edstem\n- GDB\n- LaTeX"
  ],
  "CSE422": [
    "Course Description: CSE 422 teaches modern algorithmic techniques for large-scale and noisy data, emphasizing links to learning theory and statistics.",
    "Learning Goals:\n\n- Implement modern algorithms for data processing.\n- Understand approximation and streaming techniques.\n- Analyze algorithms using theoretical tools from ML and statistics.",
    "Topics:\n\n- Count-min sketch\n- LSH\n- VC-dimension\n- Regularization\n- PCA\n- SVD\n- Spectral clustering",
    "Tools:\n\n- Python\n- SciPy\n- Math/linear algebra toolkits\n- Scientific papers"
  ]
}