Course Goals
This course develops students' sense of what really happens when
          software runs, and an understanding that this question can
          be answered at several levels of abstraction, including the hardware 
          architecture level, the assembly level, the C programming level, and 
          the Java programming level.  Although we focus on data
          representation, assembly, and C, this core is connected to higher
          levels (ie, how Java could be implemented), lower levels (ie,
          the general structure of a processor), and the role of the
          operating system (but not how it is implemented).
For computer science students wanting to specialize at higher levels
          of abstraction, this course could – in the extreme – be
          the only course they take that considers the "C level" and below.
          However, most will take a subset ofSystems Programming (CSE333),Operating Systems (CSE451),Compilers (CSE401),
          etc.
For students interested in hardware, embedded systems, computer
          engineering, and computer architecture, this course is the
          introductory course after which other courses will delve both deeper
          (ie, into specific topics) and lower (eg, into hardware
          implementation, circuit design, etc.).
          Of particular interest areIntroduction to Digital Design (CSE369),Design of Digital Circuits and Systems (CSE371),Introduction to Embedded Systems (CSE474), andComputer Architecture I (CSE469).

Course Themes
The course has four principal themes:
Representation:How different data types (from simple
            integers to arrays of data structures) are represented in memory;
            how instructions are encoded; and how memory addresses (pointers)
            are generated and used to create complex structures.
Translation:How high-level languages are translated into
            the basic instructions embodied in process hardware, with a
            particular focus on C and Java.
Control Flow:How computers organize the order of their
            computations, keep track of where they are in large programs, and
            provide the illusion of multiple processes executing in
            parallel.

Course Learning Objectives
At the end of this course, students should be able to:
Describe the multi-step process by which a high-level program
            becomes a stream of instructions executed by a processor;
Describe the basic organization of the memory hierarchy and the
            effect of its parameters on system performance;
Trace the execution of assembly code (x86-64), map the assembly
            to high-level language constructs, and write simple pieces of
            assembly programs;
Write C code using pointers to create and manipulate data
            structures;
Write (or rewrite) code to take advantage of the computer
            execution model to improve execution efficiency;
Debug small-ish C and assembly programs using GDB;
Perform basic navigation and file system operations in Linux
            using a terminal;
Explain the basic role of an operating system in executing
            processes;
Identify some of the ways that computers and their design
            principles affect society today.